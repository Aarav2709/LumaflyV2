name: Build

on: [push, pull_request]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET for windows build
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore -r win-x64
    - name: Build
      run: |
        cd Scarab
        dotnet publish --no-restore -r win-x64 -p:PublishSingleFile=true -p:Configuration=Release --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=embedded
        cd ..
    - name: Upload windows binary
      uses: actions/upload-artifact@v3
      with:
        name: Scarab-Windows
        path: Scarab/bin/Release/net7.0/win-x64/publish/

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET for linux build
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore -r linux-x64
    - name: Build
      run: | 
        cd Scarab
        dotnet publish -r linux-x64 -p:PublishSingleFile=true -p:Configuration=Release --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=embedded
        cd ..
        chmod +x Scarab/bin/Release/net7.0/linux-x64/publish/Scarab
        zip -jr linux.zip Scarab/bin/Release/net7.0/linux-x64/publish/*
    - name: Upload linux binary
      uses: actions/upload-artifact@v3
      with:
        name: Scarab-Linux
        path: linux.zip

  build-macos:
    runs-on: macos-latest
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET for macos build
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore -r osx-x64
    - name: Build
      run: |
        cd Scarab
        dotnet publish --no-restore -r osx-x64 -p:PublishSingleFile=true -p:Configuration=Release --self-contained true
        cd ..
        cd Scripts
        python3 make_mac_app.py Scarab.app ../Scarab/bin/Release/net7.0/osx-x64/publish ../out
        cd ..
    - name: Upload macos binary
      uses: actions/upload-artifact@v3
      with:
        name: Scarab-MacOS
        path: out/mac.zip

  # needs to run when releasing but before main release action
  build-auto-updater:
    # needs windows build for the exe to embed in the updater
    needs: [build-windows]
    runs-on: windows-latest
    env:
      NUGET_CERT_REVOCATION_MODE: offline

    if: startsWith(github.ref, 'refs/tags')

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET for AU build
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
       path: ./artifacts
    - name: Restore dependencies
      run: dotnet restore -r win-x64
    - name: Build
      run: |
        cp ./artifacts/Scarab-Windows/Scarab.exe ./Scarab.AU/Scarab.exe
        cd Scarab.AU
        dotnet publish -r win-x64 -c Release --self-contained true
        cd ..
    - name: Upload windows binary
      uses: actions/upload-artifact@v3
      with:
        name: Scarab-AU
        path: Scarab.AU/bin/Release/net7.0/win-x64/publish/


  release:
    needs: [build-macos, build-windows, build-linux, build-auto-updater]
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with: 
          path: ./artifacts

      - name: Zip files
        run: |
          zip -jr Scarab-Windows.zip ./artifacts/Scarab-Windows/*

          cp ./artifacts/Scarab-Windows/Scarab.exe ./Scarab.exe

          cp ./artifacts/Scarab-AU/Scarab.AU.exe ./Scarab.AU.exe
          
          mv ./artifacts/Scarab-Linux/linux.zip Scarab-Linux.zip
          
          mv ./artifacts/Scarab-MacOS/mac.zip Scarab-MacOS.zip

      - name: Create release if a new tag is pushed
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./Scarab.exe
            ./Scarab.AU.exe
            ./Scarab-Windows.zip
            ./Scarab-MacOS.zip
            ./Scarab-Linux.zip 
 
  # run after release so no one downloads non existent files
  create-appcast:
    needs: [release]
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')

    steps:
      - uses: actions/checkout@v3
      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Update appcast
        run : |
          python3 Scripts/make_appcast.py ${{ steps.vars.outputs.tag }}
          cat appcast.xml

      - name: Push updated appcast
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: master
          folder: .
          clean: true
          commit-message: Update appcast to ${{ steps.vars.outputs.tag }}